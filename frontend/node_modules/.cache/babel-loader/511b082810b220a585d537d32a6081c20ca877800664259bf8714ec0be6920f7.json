{"ast":null,"code":"import { setUserData } from \"../storage/auth.storage\";\nimport api from \"./api.js\";\nexport const login = async (username, password) => {\n  console.log(username);\n  console.log(password);\n  console.log(api.getUri());\n  const res = await api.post(\"/Auth/login\", {\n    UserName: username,\n    Password: password\n  });\n  console.log(res);\n  return res.data;\n};\nexport const register = async (email, username, password) => {\n  const res = await api.post(\"/users\", {\n    email,\n    username,\n    password\n  });\n  return res.data;\n};\nexport const refresh = async token => {\n  const res = await api.put(\"/tokens\", {\n    token\n  });\n  return res.data;\n};\nexport const logout = async (token, userId, dispatch) => {\n  try {\n    const res = await api.delete(`/tokens/${token}/users/${userId}`);\n    return res.data;\n  } catch (e) {\n    return Promise.reject(e);\n  } finally {\n    setUserData(null, null, dispatch);\n  }\n};\nexport const getUserId = async userName => {\n  const res = await api.get(`/users/${userName}/userIds`);\n  return res.data;\n};","map":{"version":3,"names":["setUserData","api","login","username","password","console","log","getUri","res","post","UserName","Password","data","register","email","refresh","token","put","logout","userId","dispatch","delete","e","Promise","reject","getUserId","userName","get"],"sources":["C:/Stuff/KTU/8 semestras/bakalauras/project/frontendreact/my-app/src/services/auth.service.js"],"sourcesContent":["import { setUserData } from \"../storage/auth.storage\";\r\nimport api from \"./api.js\";\r\n\r\nexport const login = async (username, password) => {\r\n  console.log(username);\r\n  console.log(password);\r\n  console.log(api.getUri());\r\n  const res = await api.post(\"/Auth/login\", {\r\n    UserName: username,\r\n    Password: password,\r\n  });\r\n  console.log(res);\r\n  return res.data;\r\n};\r\n\r\nexport const register = async (email, username, password) => {\r\n  const res = await api.post(\"/users\", {\r\n    email,\r\n    username,\r\n    password,\r\n  });\r\n  return res.data;\r\n};\r\n\r\nexport const refresh = async (token) => {\r\n  const res = await api.put(\"/tokens\", {\r\n    token,\r\n  });\r\n  return res.data;\r\n};\r\n\r\nexport const logout = async (token, userId, dispatch) => {\r\n  try {\r\n    const res = await api.delete(`/tokens/${token}/users/${userId}`);\r\n    return res.data;\r\n  } catch (e) {\r\n    return Promise.reject(e);\r\n  } finally {\r\n    setUserData(null, null, dispatch);\r\n  }\r\n};\r\n\r\nexport const getUserId = async (userName) => {\r\n  const res = await api.get(`/users/${userName}/userIds`);\r\n  return res.data;\r\n};\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,GAAG,MAAM,UAAU;AAE1B,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACjDC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;EACrBE,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EACrBC,OAAO,CAACC,GAAG,CAACL,GAAG,CAACM,MAAM,EAAE,CAAC;EACzB,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,aAAa,EAAE;IACxCC,QAAQ,EAAEP,QAAQ;IAClBQ,QAAQ,EAAEP;EACZ,CAAC,CAAC;EACFC,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;EAChB,OAAOA,GAAG,CAACI,IAAI;AACjB,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,KAAK,EAAEX,QAAQ,EAAEC,QAAQ,KAAK;EAC3D,MAAMI,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,QAAQ,EAAE;IACnCK,KAAK;IACLX,QAAQ;IACRC;EACF,CAAC,CAAC;EACF,OAAOI,GAAG,CAACI,IAAI;AACjB,CAAC;AAED,OAAO,MAAMG,OAAO,GAAG,MAAOC,KAAK,IAAK;EACtC,MAAMR,GAAG,GAAG,MAAMP,GAAG,CAACgB,GAAG,CAAC,SAAS,EAAE;IACnCD;EACF,CAAC,CAAC;EACF,OAAOR,GAAG,CAACI,IAAI;AACjB,CAAC;AAED,OAAO,MAAMM,MAAM,GAAG,MAAAA,CAAOF,KAAK,EAAEG,MAAM,EAAEC,QAAQ,KAAK;EACvD,IAAI;IACF,MAAMZ,GAAG,GAAG,MAAMP,GAAG,CAACoB,MAAM,CAAE,WAAUL,KAAM,UAASG,MAAO,EAAC,CAAC;IAChE,OAAOX,GAAG,CAACI,IAAI;EACjB,CAAC,CAAC,OAAOU,CAAC,EAAE;IACV,OAAOC,OAAO,CAACC,MAAM,CAACF,CAAC,CAAC;EAC1B,CAAC,SAAS;IACRtB,WAAW,CAAC,IAAI,EAAE,IAAI,EAAEoB,QAAQ,CAAC;EACnC;AACF,CAAC;AAED,OAAO,MAAMK,SAAS,GAAG,MAAOC,QAAQ,IAAK;EAC3C,MAAMlB,GAAG,GAAG,MAAMP,GAAG,CAAC0B,GAAG,CAAE,UAASD,QAAS,UAAS,CAAC;EACvD,OAAOlB,GAAG,CAACI,IAAI;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}